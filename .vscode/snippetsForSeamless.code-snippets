{
	// Place your pegasus-core-aut-crm workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"logFailedTestCase": {
		"scope": "javascript,typescript",
		"prefix": "logF",
		"body": [
			"logFailTestcase(temp, ``);"
		],
		"description": "Snippet for logFailTestcase"
	},
	"TXT Set value": {
		"scope": "javascript,typescript",
		"prefix": "txtS",
		"body": [
			"public async input(value: string) {",
			"\ttry {",
			"\t\tconst element = await this.getFieldType(this.txtName);",
			"\t\tawait element.setValue(value);",
			"\t\treturn true;",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		],
		"description": "Snippet for Input value to txt"
	},
	"TXT Get value": {
		"scope": "javascript,typescript",
		"prefix": "txtG",
		"body": [
			"public async get() {",
			"\ttry {",
			"\t\tawait this.driverService.waitUntilElementVisible(this.);",
			"\t\tconst result = await this.driverService.getAttributeValue(this.,'value');",
			"\t\treturn result;",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn '';",
			"\t}",
			"}"
		],
		"description": "Snippet for get value from txt"
	},
	"TXT Validate value": {
		"scope": "javascript,typescript",
		"prefix": "txtV",
		"body": [
			"public async validateValue(expectedValue: string){",
			"\ttry {",
			"\t\tawait this.driverService.waitUntilElementVisible(this.);",
			"\t\tconst actualValue = await this.driverService.getAttributeValue(this.,'value');",
			"\t\treturn await this.driverService.validateRecord('Validate !',",
			"\t\t\t[actualValue, expectedValue, 'Incorrect !']);",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		],
		"description": "Snippet for validate value of txt"
	},
	"pressButton SAAS Return": {
		"scope": "javascript,typescript",
		"prefix": "btnP",
		"body": [
			"public async press(){",
			"\ttry {",
			"\t\tconst element = await this.getFieldType(this.);",
			"\t\tawait element.click();",
			"\t\treturn true;",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		],
		"description": "Snippet for Press Button"
	},
	"LBL Get value": {
		"scope": "javascript,typescript",
		"prefix": "lblG",
		"body": [
			"public async get() {",
			"\ttry {",
			"\t\tconst element = await this.getFieldType(this.);",
			"\t\tconst result = await element.getText();",
			"\t\treturn result;",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn '';",
			"\t}",
			"}"
		],
		"description": "Snippet for get value from lbl"
	},
	"LBL Validate value": {
		"scope": "javascript,typescript",
		"prefix": "lblV",
		"body": [
			"public async validateValue(expectedValue: string){",
			"\ttry {",
			"\t\tconst element = await this.getFieldType(this.lblTitle);",
			"\t\tconst actualValue = await element.getValue();",
			"\t\treturn await this.driverService.validateRecord('Validate !',",
			"\t\t\t[actualValue, expectedValue, 'Incorrect !']);",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		],
		"description": "Snippet for validate value of lbl"
	},
	"CMB Set value": {
		"scope": "javascript,typescript",
		"prefix": "cmbS",
		"body": [
			"public async input(value: string) {",
			"\ttry {",
			"\t\tawait this.driverService.waitUntilElementVisible(this.);",
			"\t\tawait this.driverService.setText(this., value);",
			"\t\tawait waitUntilHorizontalProgressBarLoaded_v2(this.driverService, 10);",
			"\t\tawait selectDropdownOption(value, '', this.driverService);",
			"\t\treturn true;",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		],
		"description": "Snippet for Input value to CMB"
	},
	"CMB CPS Set value": {
		"scope": "javascript,typescript",
		"prefix": "cmbS_CPS",
		"body": [
			"public async input(value: string) {",
			"\ttry {",
			"\t\tawait this.driverService.waitUntilElementVisible(this.);",
			"\t\tawait this.driverService.setText(this., value);",
			"\t\tconst option = By.xpath(`//ng-dropdown-panel//*[contains(@class,'option') and (text()=' ${value} ')]`);",
			"\t\tawait this.driverService.waitUntilElementVisible(option);",
			"\t\tawait this.driverService.click(option);",
			"\t\treturn true;",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		],
		"description": "Snippet for Input value to CMB"
	},
	"CMB Validate value": {
		"scope": "javascript,typescript",
		"prefix": "cmbV",
		"body": [
			"public async validateValue(expectedValue: string){",
			"\ttry {",
			"\t\tawait this.driverService.waitUntilElementVisible(this.);",
			"\t\tawait waitUntilHorizontalProgressBarLoaded_v2(this.driverService, 50);",
			"\t\tconst actualValue = await this.driverService.getAttributeValue(this.,'value');",
			"\t\treturn await this.driverService.validateRecord('Validate !',",
			"\t\t\t[actualValue, expectedValue, 'Incorrect !']);",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		],
		"description": "Snippet for validate value of cmb"
	},
	"ifInput": {
		"scope": "javascript,typescript",
		"prefix": "ifIn",
		"body": [
			"if(){",
			"\ttemp = await",
			"\tlogFailTestcase(temp, `Input failed!`);",
			"}"
		]
	},
	"validateList": {
		"scope": "javascript, typescript",
		"prefix": "lsV",
		"body": [
			"public async validateValue(expectedValue: string, positionRow: number = 1){",
			"\ttry {",
			"\t\tconst lblActualValue = By.xpath(``);",
			"\t\tawait this.driverService.waitUntilElementVisible(lblActualValue);",
			"\t\tconst actualValue = await this.driverService.getText(lblActualValue);",
			"\t\treturn await this.driverService.validateRecord('Validate !',",
			"\t\t\t[actualValue, expectedValue, 'Incorrect !']);",
			"\t} catch (error) {",
			"\t\tconsole.log('');",
			"\t\tconsole.log(error);",
			"\t\treturn false;",
			"\t}",
			"}"
		]
	}
}